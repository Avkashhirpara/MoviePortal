package com.movie.portal.booking;

import java.sql.PreparedStatement;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import com.movie.portal.entity.Booking;
import com.movie.portal.entity.mapper.ShowSearchMapper;
import com.movie.portal.show.ShowSearchDTO;

@Repository
public class BookingRepository {

	@Autowired
	JdbcTemplate jdbcTemplate;

	@Autowired
	NamedParameterJdbcTemplate namedParameterJdbcTemplate;

	public long insertBooking(Booking booking) {
		KeyHolder keyHolder = new GeneratedKeyHolder();

		jdbcTemplate.update(connection -> {
			PreparedStatement ps = connection.prepareStatement(
					"insert into booking(uid, show_id, total_seat,total_amount, discount_id, total_discount,"
							+ " payment_status, status) values(?,?,?,?,?,?,?,?)");
			ps.setLong(1, booking.getUid());
			ps.setLong(2, booking.getShowid());
			ps.setLong(3, booking.getTotalSeat());
			ps.setDouble(4, booking.getTotalAmount());
			ps.setLong(5, booking.getDiscountId());
			ps.setDouble(4, booking.getTotalDiscount());
			ps.setLong(6, booking.getPaymentStatus());
			ps.setLong(6, booking.getStatus());

			return ps;
		}, keyHolder);

		return (long) keyHolder.getKey();
	}

	public Booking updateBooking(Booking Booking) {
		List<ShowSearchDTO> shows = null;
		SqlParameterSource namedParameters = new MapSqlParameterSource().addValue("name", "%"+showName+"%");
		//SqlParameterSource namedParameters = new MapSqlParameterSource().addValue("name", showName);
		String sql = "	SELECT "
				+ "	 s.name,"
				+ "	 s.description,"
				+ "	 s.language,"
				+ "	 s.technology,"
				+ "	 s.start_time,"
				+ "	 p.name theater, "
				+ "	 screen.screen_location screenlocation,"
				+ "	 s.booked_seats,"
				+ "	 p.location, "
				+ "	 p.city,"
				+ "	 s.id showId,"
				+ "	 screen.id screenId,"
				+ "	 p.id PartnerId,"
				+ "	 screen.screen_name "
				+ "	FROM movieportal.show s inner join screen on s.screen_id = screen.id"
				+ " inner join partner p on p.id = screen.pid"
				+ "	where s.status = 1 and s.name like :name";
		
		try {
			shows = namedParameterJdbcTemplate.query(sql,namedParameters, new ShowSearchMapper());
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		return shows;
	}
	
public long updateBooking(Booking booking) {
    KeyHolder keyHolder = new GeneratedKeyHolder();

    jdbcTemplate.update(connection -> {
        PreparedStatement ps = connection.prepareStatement(
        		"insert into booking(uid, show_id, total_seat,"
        		+ " total_amount, discount_id, total_discount,"
        		+ " payment_status, status) values(?,?,?,?)");
        ps.setInt(1, );
        return ps;
    }, keyHolder);

    return (long) keyHolder.getKey();
}
}

}
